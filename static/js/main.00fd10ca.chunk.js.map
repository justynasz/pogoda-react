{"version":3,"sources":["components/Form.js","components/Result.js","components/App.js","serviceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","type","value","newcity","placeholder","onChange","change","Result","_props$weather","weather","error","city","date","sunrise","sunset","temp","pressure","wind","content","sunriseTime","Date","toLocaleTimeString","sunsetTime","Fragment","className","concat","App","state","sunrice","handleCityChange","e","_this","setState","target","prevProps","prevState","_this2","this","API","fetch","then","response","ok","Error","json","data","time","toLocaleString","sys","main","speed","catch","err","components_Form","src_components_Result","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.00fd10ca.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Form = props => {\r\n    return (\r\n        <form>\r\n            <input\r\n                type=\"text\"\r\n                value={props.newcity}\r\n                placeholder=\"wpisz miasto\"\r\n                onChange={props.change}\r\n            />\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport './Result.css'\r\n\r\nconst Result = props => {\r\n    const { error, city, date, sunrise, sunset, temp, pressure, wind } = props.weather\r\n\r\n    let content = null;\r\n\r\n    if (!error && city) {\r\n        const sunriseTime = new Date(sunrise * 1000).toLocaleTimeString()\r\n        const sunsetTime = new Date(sunset * 1000).toLocaleTimeString()\r\n        content = (\r\n            <>\r\n                <h3>Wyniki wyszukiwania dla <em>{city}</em></h3>\r\n                <h4>Dane dla dnia i godziny: {date}</h4>\r\n                <h4>Aktualna temperatura:  {temp} &#176;C</h4>\r\n                <h4>Wschód słońca dzisiaj o: {sunriseTime}</h4>\r\n                <h4>Zachód słońca dzisiaj o: {sunsetTime}</h4>\r\n                <h4>Aktualna siła wiatru {wind} m/s</h4>\r\n                <h4>Aktualne ciśnienie {pressure} hPa</h4>\r\n            </>\r\n        )\r\n    }\r\n    return (\r\n        <div className=\"result\">\r\n            {error ? `Nie ma w bazie ${city}` : content}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Result;","import React, {\n    Component\n} from 'react';\nimport Form from './Form';\nimport Result from './Result';\nimport './App.css';\n\nconst APIKey = 'b1cdb5420f30aea1be9fd8bd2001db2d'\nclass App extends Component {\n\n    state = {\n        newcity: '',\n        date: '',\n        city: '',\n        sunrice: '',\n        sunset: '',\n        temp: '',\n        pressure: '',\n        wind: '',\n        error: ''\n    }\n\n    handleCityChange = e => {\n        this.setState({\n            newcity: e.target.value\n        })\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.state.newcity === 0) return\n        if (prevState.newcity !== this.state.newcity) {\n            const API = `http://api.openweathermap.org/data/2.5/weather?q=${this.state.newcity}&APPID=${APIKey}&units=metric`\n\n            fetch(API)\n                .then(response => {\n                    if (response.ok) {\n                        return response\n                    }\n                    throw Error(\"Nie ma takiego miasta\")\n                })\n                .then(response => response.json())\n                .then(data => {\n                    const time = new Date().toLocaleString()\n                    this.setState(prevState => ({\n                        error: false,\n                        date: time,\n                        sunrise: data.sys.sunrise,\n                        sunset: data.sys.sunset,\n                        temp: data.main.temp,\n                        pressure: data.main.pressure,\n                        wind: data.wind.speed,\n                        city: prevState.newcity\n                    }))\n                })\n                .catch(err => {\n                    this.setState(prevState => ({\n                        error: true,\n                        city: prevState.newcity\n                    }))\n                })\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"App\" >\n                <h1>Prognoza pogody</h1>\n                <Form newcity={this.state.newcity} change={this.handleCityChange} />\n                <Result weather={this.state} />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}